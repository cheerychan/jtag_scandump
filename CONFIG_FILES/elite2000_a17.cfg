# Zhaoxin Elite-2000

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME elite2000
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID ] } {
   set _DAP_TAPID $DAP_TAPID
} else {
   set _DAP_TAPID 0x5BA00477
}


jtag newtap $_CHIPNAME DAP -irlen 4 -ircapture 0x1 -irmask 0xf \
        -expected-id $_DAP_TAPID

# GDB target:  Cortex-A, using DAP
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_a -chain-position $_CHIPNAME.DAP -dbgbase 0x80050000 

# some TCK tycles are required to activate the DEBUG power domain
# jtag configure $_CHIPNAME.DAP -event post-reset "runtest 100"
# have the DAP "always" be active
# jtag configure $$_CHIPNAME.DAP -event setup "jtag tapenable $_CHIPNAME.DAP"

proc elite800_dbginit {target} {
     # General Cortex A8 debug initialisation
     cortex_a8 dbginit
}

reset_config trst_and_srst
# Slow speed to be sure it will work
jtag_rclk 1000
$_TARGETNAME configure -event "reset-start" { jtag_rclk 1000 }

$_TARGETNAME configure -event reset-assert-post "elite800_dbginit $_TARGETNAME"

proc init_pmu { } {
    mww phys 0xd839e010 0x0f
    mww phys 0xd839e014 0x0f
    mww phys 0xd8396000 0x0f
    mdw phys 0xd839c498

    mww phys 0xd8130250 0xffffffff
    mww phys 0xd8130254 0xffffffff
}

proc wakeup { } {
    mww 0xd80a8838 0x48
    mww 0xd80a8838 0xa548
    mww 0xd80a8608 0x6
}

proc init_cpu { } {
#    arm mcr p15 0 c8 c7 0 0
#    arm mcr p15 0 c8 c6 0 0
#    arm mcr p15 0 c8 c5 0 0
#    arm mcr p15 0 c7 c5 0 0 
#    arm mcr p15 0 c7 c5 6 0
    
#    arm mcr p15 0 c1 c0 0 0x802

    arm mcr 15 0 8 7 0 0
    arm mcr 15 0 8 6 0 0
    arm mcr 15 0 8 5 0 0
    arm mcr 15 0 7 5 0 0
    arm mcr 15 0 7 5 6 0

    arm mcr 15 0 1 0 0 0x2000

    mww phys 0xd839e03c 0x0
}

proc init_mem { } {
    halt
 #   dap apsel 1

    mww 0xd80a8b04 0x00000030

    mww 0xd80a8b10 0x0411000d

    mww 0xd80a8b14 0x00000007

    mww 0xd80a8b18 0x45000100

    mww 0xd80a8b24 0x0000000d

    mww 0xd80a8b28 0x00800a01

    mww 0xd80a8b00 0x00000120

    mww 0xd80a8b60 0x00000003

    mww 0xd80a8b64 0x00000003

#    mww 0xd80a8b00 0x00002120

    mww 0xd8130250 0xffffffff

    mww 0xd8130254 0xffffffff

    mww 0xd8120500 0x00000000

    dap apsel 0
}

proc load_uboot { } {
    halt
    dap apsel 1
    cd /home/hobo/bootloader/1.1.12/build_output
    load_image u-boot.bin 0x03f80000
    reg cpsr 0x1d3
    resume 0x3f80000
}
proc load_secure_boot { } {
    halt
    dap apsel 0
    cd /home/scm_source/scotty-ubuntu/sw/soc/secureboot/bl1
    load_image toc_image.bin 0x800000
    load_image bl1.bin 0x2000000
    load_image secos_toc_image.bin 0x4000000
    load_image nonsecos_toc_image.bin 0x6000000
}


proc load_dboot { } {
    halt
    cd /root/Desktop/deon/uboot
    load_image u-boot.bin 0x03f80000
    resume 0x3f80000
}

proc load_dkernel {} {
    halt
    cd /root/Desktop/deon/elite/arch/arm/boot
    load_image uImage 0x2000000
    resume
}

proc load_cte {} {
    halt
    cd /root/cldu/uboot_bak
    load_image u-boot.bin 0x03f80000
    cd /root/cldu/uboot_bak/examples/standalone/cte
    load_image cte_player.bin 0x3e00000
    resume 0x3f80000
}

proc load_jboot {} {
    halt
    cd /home/janiceyi/elite/uboot
    load_image u-boot.bin 0x03f80000
    resume 0x03f80000
}

proc db_dump_low { offset} {
    mwb 0xd80a861a 0x18
    mww 0xd80a89fb $($offset+0x00)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x01)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x02)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x03)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x04)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x05)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x06)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x07)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x08)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x09)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0a)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0b)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0c)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0d)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0e)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0f)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x10)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x11)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x12)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x13)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x14)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x15)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x16)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x17)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x18)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x19)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1a)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1b)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1c)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1d)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1e)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1f)
    mdw 0xd80a88fd
}
proc reset_gpu {} {
    mww 0xd839cb04 0x40000
}
proc init_cte {} {
    load_image /root/cldu/uboot_bak/u-boot.bin 0x3f80000
    load_image /root/cldu/uboot_bak/examples/standalone/cte/cte_player.bin 0x3e00000
    resume 0x3f80000
}
proc db_dump_high { offset} {
    mwb 0xd80a861a 0x19
    mww 0xd80a89fb $($offset+0x00)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x01)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x02)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x03)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x04)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x06)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x07)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x08)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x09)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0a)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0b)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0c)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0d)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0e)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x0f)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x10)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x11)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x12)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x13)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x14)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x15)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x16)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x17)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x18)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x19)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1a)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1b)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1c)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1d)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1e)
    mdw 0xd80a88fd
    mww 0xd80a89fb $($offset+0x1f)
    mdw 0xd80a88fd
}

proc miu_init {} {
	mww 0xd839D200 0x006b
	mww 0xd839D2c4 0x0f07

	# release RST
	mww 0xd839D200 0x046b
	# wait 500us ?
		
	# trigger power up
	#mww 0xd839D200 0x056b
}

proc mpll_100 {} {
	# MPLL setting 100MHz
	mww 0xd839D2e0 0xa02884b9
	mww 0xd839D2e4 0x04000000
	mww 0xd839D2e8 0x00800000
	# add 1us delay
	#mww 0xd839D2e0 0x002884b9
}

proc mpll_200 {} {
	# MPLL setting 200MHz
	mww 0xd839D2e0 0xa02684b9
	mww 0xd839D2e4 0x04000000
	mww 0xd839D2e8 0x00600000
	# add 1us delay
	#mww 0xd839D2e0 0x002684b9
}

proc mpll_400 {} {
	# MPLL setting 400MHz
	mww 0xd839D2e0 0xa02484b9
	mww 0xd839D2e4 0x04000000
	mww 0xd839D2e8 0x00400000
	# add 1us delay
	mww 0xd839D2e0 0x002484b9
}

proc mpll_800 {} {
	# MPLL setting 800MHz
	mww 0xd839D2e0 0xa02284b9
	mww 0xd839D2e4 0x04000000
	mww 0xd839D2e8 0x00200000
	# add 1us delay
	mww 0xd839D2e0 0x002284b9
}


proc miu200 {} {


	# Timing table for 100MHz
    mww 0xd839D204 0x00070210
	mww 0xd839D208 0x0
	mww 0xd839D20C 0x06000000
	mww 0xd839D210 0x0011A418
	mww 0xd839D214 0x04040004
	mww 0xd839D218 0x35011421
	mww 0xd839D21C 0x003F7FFF
	mww 0xd839D220 0x030A0080
	mww 0xd839D224 0x1
	mww 0xd839D228 0x001A1A11
	mww 0xd839D22C 0x4a62e383
	mww 0xd839D230 0x0244003f
	mww 0xd839D234 0x36363636
	mww 0xd839D238 0x36363636
	mww 0xd839D23c 0x36363636
	mww 0xd839D240 0x36363636
	mww 0xd839D244 0x39393939
	mww 0xd839D248 0x39393939
	mww 0xd839D24c 0x39393939
	mww 0xd839D250 0x30
	mww 0xd839D254 0x25252525
	mww 0xd839D258 0x20202020
	mww 0xd839D25c 0x3f3f3f3f
	mww 0xd839D2c0 0x6060023c
	mww 0xd839D2c4 0x0f07
	mww 0xd839D2c8 0x070f0f0f

}

proc miu400 {} {


	# Timing table for 200MHz
    mww 0xd839D204 0x00060310
	mww 0xd839D208 0x0
	mww 0xd839D20C 0x06000000
	mww 0xd839D210 0x0011A430
	mww 0xd839D214 0x04080008
	mww 0xd839D218 0x35011421
	mww 0xd839D21C 0x003F7FFF
	mww 0xd839D220 0x030A0080
	mww 0xd839D224 0x2
	mww 0xd839D228 0x00343411
	mww 0xd839D22C 0x4a62e383
	mww 0xd839D230 0x0244003f
	mww 0xd839D234 0x36363636
	mww 0xd839D238 0x36363636
	mww 0xd839D23c 0x36363636
	mww 0xd839D240 0x36363636
	mww 0xd839D244 0x39393939
	mww 0xd839D248 0x39393939
	mww 0xd839D24c 0x39393939
	mww 0xd839D250 0x30
	mww 0xd839D254 0x25252525
	mww 0xd839D258 0x20202020
	mww 0xd839D25c 0x3f3f3f3f
	mww 0xd839D2c0 0x6060023c
	mww 0xd839D2c4 0x0f07
	mww 0xd839D2c8 0x070f0f0f

}

proc miu800 {} {


	# Timing table for 400MHz
    mww 0xd839D204 0x00060520
	mww 0xd839D208 0x0
	mww 0xd839D20C 0x06000000
	mww 0xd839D210 0x0044a461
	mww 0xd839D214 0x0410000f
	mww 0xd839D218 0x35044424
	mww 0xd839D21C 0x003F7FFF
	mww 0xd839D220 0x030A0080
	mww 0xd839D224 0x4
	mww 0xd839D228 0x00686811
	mww 0xd839D22C 0x4c63e484
	mww 0xd839D230 0x0244003f
	mww 0xd839D234 0x36363636
	mww 0xd839D238 0x36363636
	mww 0xd839D23c 0x36363636
	mww 0xd839D240 0x36363636
	mww 0xd839D244 0x39393939
	mww 0xd839D248 0x39393939
	mww 0xd839D24c 0x39393939
	mww 0xd839D250 0x30
	mww 0xd839D254 0x25252525
	mww 0xd839D258 0x20202020
	mww 0xd839D25c 0x3f3f3f3f
	mww 0xd839D2c0 0x6060023c
	mww 0xd839D2c4 0x0f07
	mww 0xd839D2c8 0x070f0f0f

}

proc miu1600 {} {


	# Timing table for 800MHz
    mww 0xd839D204 0x00060d70
	mww 0xd839D208 0x00000018
	mww 0xd839D20C 0x06000000
	mww 0xd839D210 0x0099a4c3
	mww 0xd839D214 0x0318001c
	mww 0xd839D218 0x4809964a
	mww 0xd839D21C 0x003F7FFF
	mww 0xd839D220 0x05140080
	mww 0xd839D224 0x7
	mww 0xd839D228 0x00d0d011
	mww 0xd839D22C 0xd668e989
	mww 0xd839D230 0x0244003f
	mww 0xd839D234 0x36363636
	mww 0xd839D238 0x36363636
	mww 0xd839D23c 0x36363636
	mww 0xd839D240 0x36363636
	mww 0xd839D244 0x39393939
	mww 0xd839D248 0x39393939
	mww 0xd839D24c 0x39393939
	mww 0xd839D250 0x30
	mww 0xd839D254 0x25252525
	mww 0xd839D258 0x20202020
	mww 0xd839D25c 0x3f3f3f3f
	mww 0xd839D2c0 0x6060023c
	mww 0xd839D2c4 0x0f07
	mww 0xd839D2c8 0x070f0f0f
}

gdb_breakpoint_override hard
