# Zhaoxin Elite-2000
# =============== CONFIGURATION ================
# change this list to debug which one or more cpu you like
# for example set CPU_INDEX {1 2} to debug CPU 1 and 2
set CPU_INDEX {0}
#set CPU_INDEX {0 1}
#set CPU_INDEX {0 1 2 3}
# ============= CONFIGURATION END ==============

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME zx2000
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID ] } {
   set _DAP_TAPID $DAP_TAPID
} else {
   set _DAP_TAPID 0x5BA00477
}

jtag newtap $_CHIPNAME DAP -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_DAP_TAPID

# GDB target:  Cortex-A, using DAP
foreach i $CPU_INDEX {
    set _TARGETNAME($i) $_CHIPNAME.cpu$i
    set DBG_BASE [expr 0x80050000 + $i * 0x2000]
    puts [format "debug base for core %d is 0x%08x" $i $DBG_BASE]
    target create $_TARGETNAME($i) cortex_a -coreid $i -chain-position $_CHIPNAME.DAP -dbgbase $DBG_BASE
}

if {[llength $CPU_INDEX] > 1} {
    set target_smp_cmd "target smp "
    foreach i $CPU_INDEX {
        append target_smp_cmd "$_TARGETNAME($i) "
    }
    eval $target_smp_cmd
}

# some TCK tycles are required to activate the DEBUG power domain
# jtag configure $_CHIPNAME.DAP -event post-reset "runtest 100"
# have the DAP "always" be active
# jtag configure $$_CHIPNAME.DAP -event setup "jtag tapenable $_CHIPNAME.DAP"

proc elite800_dbginit {} {
     # General Cortex A8 debug initialisation
     cortex_a8 dbginit
}

reset_config trst_and_srst
# Slow speed to be sure it will work
jtag_rclk 1000
foreach i $CPU_INDEX {
    $_TARGETNAME($i) configure -event "reset-start" { jtag_rclk 1000 }
    $_TARGETNAME($i) configure -event reset-assert-post "elite800_dbginit"
}

proc load_secure_boot { } {
    halt
    dap apsel 0
    cd /home/scm_source/scotty-ubuntu/sw/soc/secureboot/bl1
    load_image toc_image.bin 0x800000
    load_image bl1.bin 0x2000000
    load_image secos_toc_image.bin 0x4000000
    load_image nonsecos_toc_image.bin 0x6000000
}

proc load_pmp {} {
    halt
    load_image /home/magee/Work/repository/pmp_zx2000/pmp.bin 0xdff8a000
    #load_image /home/magee/Work/Perforce/magee/sw/soc/validation/memory/timing_table_e2k.bin 0xdff88000
    #load_image /home/magee/share/ok/timing_table_zx2000.bin 0xdff88000
}

proc resume_all_core {address} {
    global _TARGETNAME
    global CPU_INDEX

    foreach i $CPU_INDEX {
        #halt
        targets $_TARGETNAME($i)
	reg pc $address
        #resume $address
    }
    targets $_TARGETNAME(0)
    resume
}

proc load_eloader {} {
    halt
    load_image /home/magee/Work/repository/bootloader-zx2000/eloader-32.00.01.bin 0xdff80000
    #load_image /home/magee/share/ok/eloader-32.00.01.bin 0xdff80000
    resume_all_core 0xdff80000
}

proc load_uboot {} {
    halt
    adapter_khz 2000
    load_image /home/magee/Work/repository/u-boot-2013.07/u-boot.bin 0x3f80000
    #load_image /home/magee/share/u-boot.bin 0x3f80000
    adapter_khz 500
    resume 0x3f80000
}

proc load_bl1 {} {
    halt
    load_image /home/magee/Work/repository/secureboot_zx2000/bl1/bl1.bin 0x1fff0000
    resume_all_core 0x1fff0000
}

proc load_bl1_tests {} {
    halt
    load_image /home/magee/Work/repository/secureboot_zx2000/bl1/bl1_tests.bin 0x1fff0000
    resume_all_core 0x1fff0000
}

proc start {} {
    load_pmp
    load_eloader
}

proc start_bl1 {} {
    halt
    start
    sleep 1200
    halt
    adapter_khz 2000
    load_image /home/magee/Work/repository/secureboot_zx2000/output/toc_images/secboot.toc 0x24000000
    load_image /home/magee/Work/repository/secureboot_zx2000/output/toc_images/u-boot.toc 0x26000000
    load_image /home/magee/Work/repository/secureboot_zx2000/output/toc_images/secos.toc 0x27000000
    load_bl1
}

proc start_bl1_tests {} {
    halt
    start
    sleep 1200
    halt
    load_bl1_tests
}

proc load_bl2 {} {
    halt
    load_image /home/magee/Work/repository/secureboot_zx2000/bl2/bl2.bin 0x22000000
    resume_all_core 0x22000000
}

proc load_diags {} {
    halt
    load_image /home/magee/Work/repository/diags-zx2000/diags.bin 0x3f80000
    resume 0x3f80000
}

proc load_secos {} {
    halt
    load_image /home/magee/Work/repository/secureboot_zx2000/secos/sec_os_deliver/secos.bin 0x25000000
    resume 0x25000000
}

proc init_pmp {} {
    halt
    load_image /home/magee/Work/repository/pmp_zx2000/pmp.bin 0xdf000000
    mww 0xdf008004 0xf
    mww 0xd813c84c 0xcafecafe
    mww 0xd813c840 1
}

proc load_secos {} {
    halt
    load_image /home/magee/Work/repository/secureboot_zx2000/output/raw_images/secos.bin 0x1400000
    load_image /home/magee/Work/repository/u-boot-2013.07/u-boot.bin 0x3f80000
    resume 0x1400000
}

proc start_secos {} {
    start
    sleep 1500
    load_secos
}

proc init_timing {} {
    halt
    mww 0xd813d204 0x00041510
    mww 0xd813d208 0x00000000
    mww 0xd813d20c 0x06000000
    mww 0xd813d210 0x0400c40d
    mww 0xd813d214 0x24030002
    mww 0xd813d218 0x35200420
    mww 0xd813d21c 0x003f7fff
    mww 0xd813d220 0x030a1380
    mww 0xd813d224 0x00000001
    mww 0xd813d228 0x00060602
    mww 0xd813d22c 0x0a4283c2
    mww 0xd813d230 0x02200080
    mww 0xd813d250 0x0f0f0f0f
    mww 0xd813d254 0x12121212
    mww 0xd813d258 0x0f0f0f0f
    mww 0xd813d25c 0x11111111
    mww 0xd813d200 0x00000433
    mww 0xd813d200 0x00000533
}

#
# dump_gpu_debug_bus:
# read the debug bus status of each index. the result should be switch from
# high bits to low bits, and only fetch 3 bytes data.
# For example, the read result is 0x12345678.
# the debug bus status is: 0x00563412.
#
proc dump_gpu_debug_bus {} {
	dap apsel 1

	puts "~~~~~~~~~debug bus info~~~~~~~~~~~~~~"

	puts "                       --- EUC0 ---"
	dump_status 0 31

	puts "                       --- EXU0 ---"
	dump_status 32 63

	puts "                       --- EFE ---"
	dump_status 64 79

	puts "                       - SLC0 TU -"
	dump_status 80 95

	puts "                       -- S0FFU --"
	dump_status 96 127

	puts "                       -- S3VD ---"
	dump_status 128 191

	puts "                       --- BCI ---"
	dump_status 192 223

	puts "                       --- MXU ---"
	dump_status 224 255

	puts "                       --- VPP ---"
	dump_status 256 351

	puts "~~~~~~~ read debug bus done! ~~~~~~~~~~~~~"
	resume
}

proc dump_status {START END} {
	set srlaaddr 0xd80a861a
	set crfbaddr 0xd80a89fb
	set crfcaddr 0xd80a88fc

	for {set i $START} {$i <= $END } {set i [expr $i+1]} {
	    set srla [expr (0x14)|(($i&0x100)>>8)]
		set crfb [expr $i&0xFF]

		mwb phys $srlaaddr $srla
		mwb phys $crfbaddr $crfb

		puts [format "                       %08x: " $i]

		mdw phys $crfcaddr
	}
}

proc dump_gpu_status {} {
    dap apsel 1
    mdw phys 0xd80a0000
}

proc dump_vcp_debug_bus {} {
    dap apsel 1
    set mmiobase 0xd80a0000

    puts "                       --- VCP ---"

    for {set i 0xa000} {$i <= 0xa818} {set i [expr $i+4]} {
        set addr [expr $mmiobase + $i]

        puts [format "                       %08x: " $i]

        mdw phys $addr
    }
}

proc dump_miu_debug_bus {} {
    dap apsel 1

    puts "                       --- MIU ---"
    for {set i 0} {$i <= 7} {set i [expr $i+1]} {
	   mwb phys 0xd80a861a 0x10
	   mwb phys 0xd80a89fb 0x0
       puts [format "                       %08x: " $i]
       mww phys 0xd813d0c0 $i
       mdw phys 0xd80a88fc
    }
}

# BASE: gpu_addr/1024
# SIZE: allocation size with MB unit
proc dump_mxu_sram {BASE SIZE} {
    dap apsel 1
    puts " dump sram"

    for {set i $BASE} {$i <= [expr $BASE+$SIZE]} {set i [expr $i+1]} {
        mww phys 0xd80a9080 $i
        mdw phys 0xd80a9084
    }
    
}

proc ap_w {apsel waddr wdata} {
   set ap_v    [format "%09x" [expr "[expr "$apsel" << "27"]" + "0x4"]];
   set waddr_v [format "%09x" [expr "[expr "$waddr" << "3"]"  + "0x2"]];
   set wdata_v [format "%09x" [expr "[expr "$wdata" << "3"]"  + "0x6"]];

   irscan zx2000.DAP 0xa;

   while "1" {
       set TDO [drscan zx2000.DAP 35 0x$ap_v;];       ##select ap
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK"
       if {$TDO_CHECK == 2} {
          break;
       }
   }

   irscan zx2000.DAP 0xb; 

   while "1" {
       set TDO [drscan zx2000.DAP 35 0x$waddr_v;];    ##waddr
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK"
       if {$TDO_CHECK == 2} {
          break;
       }   
   }
   while "1" {
       set TDO [drscan zx2000.DAP 35 0x$wdata_v;];    ##wdata
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK"
       if {$TDO_CHECK == 2} {
          break;
       }   
   }
}

proc ap_r {apsel raddr} {
   set ap_v    [format "%09x" [expr "[expr "$apsel" << "27"]" + "0x4"]];
   set raddr_v [format "%09x" [expr "[expr "$raddr" << "3"]"  + "0x2"]];

   irscan zx2000.DAP 0xa;

   while "1" {
       set TDO [drscan zx2000.DAP 35 0x$ap_v;];     #select ap
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK"
       if {$TDO_CHECK == 2} {
          break;
       }
   }  

   irscan zx2000.DAP 0xb;

   while "1" {
       set TDO [drscan zx2000.DAP 35 0x$raddr_v;];  #raddr 
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK"
       if {$TDO_CHECK == 2} {
          break;
       }
   }    
   while "1" {
       set TDO [drscan zx2000.DAP 35 0x7;];
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK"
       if {$TDO_CHECK == 2} {
          break;
       }
   }    
   while "1" {
       set TDO [drscan zx2000.DAP 35 0x7;];         #rdata
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
       puts "$TDO_DATA $TDO_CHECK"
       if {$TDO_CHECK == 2} {
          break;
       }
   }    
}

gdb_breakpoint_override hard
