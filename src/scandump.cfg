# Zhaoxin ZX2100 PMP	
# =============== CONFIGURATION ================
# change this list to debug which one or more cpu you like
# for example set CPU_INDEX {1 2} to debug CPU 1 and 2
set CPU_INDEX {0}
#set CPU_INDEX {0 1}
#set CPU_INDEX {0 1 2 3}
# ============= CONFIGURATION END ==============

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME pmp
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID ] } {
   set _DAP_TAPID $DAP_TAPID
} else {
   set _DAP_TAPID 0xaabbccdd
}

#jtag newtap $_CHIPNAME DAP -irlen 4 -ircapture 0x2 -irmask 0xf -expected-id $_DAP_TAPID
jtag newtap $_CHIPNAME DAP -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_DAP_TAPID

# GDB target:  ZX2100 PMP, using DAP
set _TARGETNAME $_CHIPNAME
set DBG_BASE [expr 0x00000000 + 0x000]
#puts [format "debug base for core %d is 0x%08x" $DBG_BASE]
#target create $_TARGETNAME zx_pmp -coreid  -chain-position $_CHIPNAME.DAP -dbgbase $DBG_BASE
target create $_TARGETNAME zx_pmp -chain-position $_CHIPNAME.DAP -dbgbase $DBG_BASE

# some TCK tycles are required to activate the DEBUG power domain
# jtag configure $_CHIPNAME.DAP -event post-reset "runtest 100"
# have the DAP "always" be active
# jtag configure $$_CHIPNAME.DAP -event setup "jtag tapenable $_CHIPNAME.DAP"

proc zx_pmp_dbginit {} {
     # General ZX RISC debug initialisation
     zx_pmp dbginit
}

reset_config trst_and_srst
# Slow speed to be sure it will work
jtag_rclk 1000
$_TARGETNAME configure -event "reset-start" { jtag_rclk 1000 }
$_TARGETNAME configure -event reset-assert-post "zx_pmp_dbginit"

 
proc ap_w {pmp_apsel waddr wdata} {
   set ap_v    [format "%09x" [expr "[expr "$pmp_apsel" << "27"]" + "0x4"]];
   set waddr_v [format "%09x" [expr "[expr "$waddr" << "3"]"  + "0x2"]];
   set wdata_v [format "%09x" [expr "[expr "$wdata" << "3"]"  + "0x6"]];

   irscan pmp.DAP 0xa;

   while "1" {
       set TDO [drscan pmp.DAP 35 0x$ap_v;];       ##select ap
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK";
       if {$TDO_CHECK == 2} {
          break;
       }
   }

   irscan pmp.DAP 0xb; 

   while "1" {
       set TDO [drscan pmp.DAP 35 0x$waddr_v;];    ##waddr
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK";
       if {$TDO_CHECK == 2} {
          break;
       }   
   }
   while "1" {
       set TDO [drscan pmp.DAP 35 0x$wdata_v;];    ##wdata
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK";
       if {$TDO_CHECK == 2} {
          break;
       }   
   }
}

proc ap_r {pmp_apsel raddr} {
   set ap_v    [format "%09x" [expr "[expr "$pmp_apsel" << "27"]" + "0x4"]];
   set raddr_v [format "%09x" [expr "[expr "$raddr" << "3"]"  + "0x2"]];

   irscan pmp.DAP 0xa;

   while "1" {
       set TDO [drscan pmp.DAP 35 0x$ap_v;];     #select ap
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK";
       if {$TDO_CHECK == 2} {
          break;
       }
   }  

   irscan pmp.DAP 0xb;

   while "1" {
       set TDO [drscan pmp.DAP 35 0x$raddr_v;];  #raddr 
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK";
       if {$TDO_CHECK == 2} {
          break;
       }
   }    
   while "1" {
       set TDO [drscan pmp.DAP 35 0x7;];
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
puts "$TDO_DATA $TDO_CHECK";
       if {$TDO_CHECK == 2} {
          break;
       }
   }    
   while "1" {
       set TDO [drscan pmp.DAP 35 0x7;];         #rdata
       set TDO_DATA  [format "%08x" [expr 0x$TDO >> "3"]];
       set TDO_CHECK [expr 0x$TDO & "0x3"];
       puts "$TDO_DATA $TDO_CHECK";
       if {$TDO_CHECK == 2} {
          break;
       }
   }    
}
 
gdb_breakpoint_override hard
